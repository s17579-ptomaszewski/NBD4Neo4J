1.	Znajdź trasy którymi można dostać się z Darjeeling na Sandakphu, mające najmniejszą ilość etapów 
	MATCH path = allShortestPaths((n:town{name: "Darjeeling"}) - [*..5] -> (p:peak{name: "Sandakphu"})) 
	RETURN path;
	
2.	Znajdź mające najmniej etapów trasy którymi można dostać się z Darjeeling na Sandakphu i które mogą być wykorzystywane zimą 
	MATCH path = allShortestPaths((n:town{name: "Darjeeling"}) - [*..5] -> (p:peak{name: "Sandakphu"})) 
	WHERE ALL (rel IN relationships(path) WHERE rel.winter = "true")  
	RETURN path;

3.	Uszereguj trasy którymi można dostać się z Darjeeling na Sandakphu według dystansu 
	MATCH path = (n:town{name: "Darjeeling"}) - [*..5] -> (p:peak{name: "Sandakphu"})
	RETURN  path, reduce(x=0, r IN relationships(path) | x+r.distance) as sumDistance
	ORDER BY sumDistance

4.	Znajdź wszystkie miejsca do których można dotrzeć przy pomocy roweru (twowheeler) z Darjeeling latem
	MATCH (:town{name:"Darjeeling"})-[:twowheeler*{summer:'true'}] -> (places)
	RETURN places

5.	Uszereguj porty lotnicze według ilości rozpoczynających się w nich lotów
	MATCH (f:Flight) - [:ORIGIN] -> (airport:Airport) 
	RETURN airport, COUNT(f) AS departures ORDER BY departures DESC;

6.	Znajdź wszystkie porty lotnicze, do których da się dolecieć (bezpośrednio lub z przesiadkami) z Los Angeles (LAX) wydając mniej niż 3000 
	MATCH path = (origin:Airport { name:"LAX" })<-[:ORIGIN]-(:Flight)-[:ORIGIN|DESTINATION]->(destination:Airport)		
	WHERE REDUCE(sum = 0, n IN [x IN NODES(path) 
	WHERE 'Flight' IN LABELS(x)] |sum + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) < 3000
	RETURN path

7.	Uszereguj połączenia, którymi można dotrzeć z Los Angeles (LAX) do Dayton (DAY) według ceny biletów 
	MATCH path = (lax:Airport {name: "LAX"})-[flight:CHEAPEST_FLIGHT*1..5]->(day:Airport{ name: "DAY"})
	WITH path AS path, REDUCE(totalPrice=0, rela IN relationships(path) | totalPrice + rela.price) as totalPrice
	RETURN path, totalPrice
	ORDER BY totalPrice

8.	Znajdź najtańsze połączenie z Los Angeles (LAX) do Dayton (DAY) 
	MATCH path = (lax:Airport {name: "LAX"})-[flight:CHEAPEST_FLIGHT*1..5]->(day:Airport{ name: "DAY"})
	WITH path AS path, REDUCE(totalPrice=0, rela IN relationships(path) | totalPrice + rela.price) as totalPrice
	RETURN path, totalPrice
	ORDER BY totalPrice limit 1

9.	Uszereguj linie lotnicze według ilości miast, pomiędzy którymi oferują połączenia (unikalnych miast biorących udział w relacjach :ORIGIN i :DESTINATION węzłów typu Flight obsługiwanych przez daną linię) 
	MATCH (a:Airport)-[:ORIGIN|:DESTINATION]-(f:Flight)
	RETURN f.airline AS airline, COUNT(DISTINCT a) AS cities ORDER BY cities ASC

10.	Znajdź najtańszą trasę łączącą 3 różne porty lotnicze
	MATCH path = (airP1:Airport)<-[:ORIGIN|:CHEAPEST_FLIGHT]-(:Flight)-[:DESTINATION|:CHEAPEST_FLIGHT]->(airP2:Airport)<-[:ORIGIN|:CHEAPEST_FLIGHT]-(:Flight)-[:DESTINATION|:CHEAPEST_FLIGHT]->(airP3:Airport)
	WHERE airP1<>airP2 AND airP1<>airP3 AND airP2<>airP3
	WITH path, REDUCE(sum = 0, n IN [x IN NODES(path) WHERE 'Flight' IN LABELS(x)] | sum + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) as price
	RETURN path, price
	ORDER BY price asc LIMIT 1

